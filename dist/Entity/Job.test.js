"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var Job_1 = __importDefault(require("./Job"));
var type = 'My job';
test('Should be a function', function () {
    expect(typeof Job_1.default).toBe('function');
});
test('Should have createdAt attribute', function () {
    var job = new Job_1.default({ type: type });
    expect(typeof job.createdAt).toBe('number');
    expect(job.type).toBe(type);
    var job2 = new Job_1.default({ type: type, createdAt: 12392 });
    expect(job2.createdAt).toBe(12392);
});
test('Should have id attribute', function () {
    var job = new Job_1.default({ type: type });
    expect(typeof job.id).toBe('undefined');
    var job2 = new Job_1.default({ type: type, id: 'me' });
    expect(job2.id).toBe('me');
});
test('Should have data attribute', function () {
    var job = new Job_1.default({ type: type });
    expect(typeof job.data).toBe('undefined');
    var job2 = new Job_1.default({ type: type, data: { user: 'me' } });
    expect(job2.data).toMatchObject({ user: 'me' });
});
test('Should have status attribute', function () {
    var job = new Job_1.default({ type: type });
    expect(job.status).toBe('inqueue');
    var job2 = new Job_1.default({ type: type, status: 'success' });
    expect(job2.status).toBe('success');
});
test('Should have scheduledAt attribute', function () {
    var job = new Job_1.default({ type: type });
    expect(typeof job.scheduledAt).toBe('number');
    var job2 = new Job_1.default({ type: type, scheduledAt: 819821 });
    expect(job2.scheduledAt).toBe(819821);
});
test('Should have retry attribute', function () {
    var job = new Job_1.default({ type: type });
    expect(job.retry).toBe(0);
    var job2 = new Job_1.default({ type: type, retry: 5 });
    expect(job2.retry).toBe(5);
});
test('Should have doneAt attribute', function () {
    var job = new Job_1.default({ type: type });
    expect(typeof job.doneAt).toBe('undefined');
    var job2 = new Job_1.default({ type: type, doneAt: 1728712 });
    expect(job2.doneAt).toBe(1728712);
});
test('Should have available attribute', function () {
    var job = new Job_1.default({ type: type });
    expect(job.available).toBe(true);
    var job2 = new Job_1.default({ type: type, available: false });
    expect(job2.available).toBe(false);
});
test('Should have inProgress attribute', function () {
    var job = new Job_1.default({ type: type });
    expect(job.inProgress).toBe(false);
    var job2 = new Job_1.default({ type: type, inProgress: true });
    expect(job2.inProgress).toBe(true);
});
test('Should have logs attribute', function () {
    var job = new Job_1.default({ type: type });
    expect(job.logs.length).toBe(0);
    var job2 = new Job_1.default({
        type: type,
        logs: [
            { createdAt: new Date().getTime(), log: 'log1', },
            { createdAt: new Date().getTime(), log: 'log1', },
        ],
    });
    expect(job2.logs.length).toBe(2);
});
test('Should return json', function () {
    var jobData = {
        id: 'me',
        type: 'me',
        logs: [],
        data: { ok: 1 },
        createdAt: new Date().getTime(),
        scheduledAt: new Date().getTime(),
        inProgress: false,
        available: true,
        doneAt: new Date().getTime(),
        retry: 2,
        status: 'success',
    };
    var job = new Job_1.default(jobData);
    expect(job.json()).toMatchObject(job);
});
test('addLog method should add a new log', function () {
    var job = new Job_1.default({ type: type });
    job.addLog('me');
    expect(job.logs.length).toBe(1);
    job.addLog('you');
    expect(job.logs.length).toBe(2);
});
test('complete should change status job', function () {
    var job = new Job_1.default({ type: type });
    job.complete({ status: true });
    expect(job.inProgress).toBe(false);
    expect(job.status).toBe('success');
    expect(job.available).toBe(false);
    expect(job.logs.length).toBe(1);
    expect(typeof job.doneAt).toBe('number');
    job.complete();
    expect(job.logs.length).toBe(2);
});
test('reqeueue should increment retry, and add a log', function () {
    var job = new Job_1.default({ type: type });
    job.reqeueue(60000 * 5);
    expect(job.status).toBe('failed');
    expect(job.inProgress).toBe(false);
    expect(job.retry).toBe(1);
    expect(job.available).toBe(true);
    expect(job.logs.length).toBe(1);
    expect(job.scheduledAt > new Date().getTime());
    job.reqeueue(60000 * 5, 'oups');
    expect(job.logs.length).toBe(2);
});
test('failed should make job not available', function () {
    var job = new Job_1.default({ type: type });
    job.failed();
    expect(job.available).toBe(false);
    expect(job.inProgress).toBe(false);
    expect(job.status).toBe('failed');
    expect(job.logs.length).toBe(1);
});
//# sourceMappingURL=data:application/json;base64,